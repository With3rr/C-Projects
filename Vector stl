#include <iostream>
using namespace std;

template <typename T>
T square(T x)
{
    return x * x;
}
template<typename T>
class BoVector
{
    T array[1000];
    int size;
public:
    BoVector() :size(0){}
    void push(T x)
    {
        array[size] = x;
        size++;
    }
    T get(int i) const
    {
        return array[i];
    }
    int getSize() const
    {
        return size;
    }
    void print() const
    {
        for (int i = 0; i < size; i++)
        {
            cout << array[i] << endl;
        }
    }
};
template <typename T>
BoVector<T> operator +(const BoVector<T>& a1, const BoVector<T>& a2)
{
    BoVector<T> ret;
    int a = a1.getSize();
    int b = a2.getSize();
    int s = a > b ? b : a;
    

    for (int i = 0; i < s; i++)
    {
        ret.push(a1.get(i) + a2.get(i));
    }
    return ret;

}


int main()
{
    BoVector<int>we;
    we.push(1);
    we.push(2);
    we.push(3);
    we.push(4);
    we.print();
    cout << endl;
    cout << endl;
    BoVector<int>ws;
    ws.push(5);
    ws.push(6);
    ws.push(7);
    ws.push(8);
    ws.print();
    cout << endl;
    cout << endl;
    BoVector<int>sa;
    sa = we + ws;
    sa.print();
    
    
}
