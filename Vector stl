#include <iostream>
#include <vector>
#include <string>
#include <conio.h>
#include<deque>;
#include<list>;
#include<time.h>

using namespace std;

template<class T>
class stosik
{
private:
    int it;
    T pamietnik;
public:
    typedef T* iterator;
    T* tabliczka;
    stosik(void)
    {
        it = 0;
        tabliczka = new T[100];
    }
    stosik(int elementy)
    {
        it = 0;
        tabliczka = new T[elementy];
    }
    ~stosik(void)
    {
        delete [] tabliczka;
    }
    void push_back(T);
    T pop_front(void);
    int size(void);
    bool empty(void);
    T* begin(void);
    T* end(void);
    T max();
    T min();
    void sortuj();
    void wypisz();
protected:
    void dealokacja(void);
};
template<class T>
void stosik<T>::wypisz()
{
    for (int i = 0; i < it; i++)
    {
        cout << *(tabliczka + i)<<" ";
        
    }
    
}

template<class T>
T stosik<T>::max()
{
    T max = tabliczka[0];
    for (int i=0; i < it; i++)
    {
        if (max < tabliczka[i])
        {
            max = tabliczka[i];
        }


    }
    return max;
  
     
}
template<class T>
T stosik<T>::min()
{
    T min = tabliczka[0];
    for (int i=0; i < it; i++)
    {
        if (min > tabliczka[i])
        {
            min = tabliczka[i];
        }


    }
    return min;


}
template<class T>
void stosik<T>::sortuj()
{
    for (int i = 0; i < it; i++)
    {
        for (int j = 0; j < it-1; j++)
        {
            if (tabliczka[j] > tabliczka[j + 1])
            {
                swap(tabliczka[j],tabliczka[j+1]);
            }

        }
    }


}

template<class T>
T* stosik<T>::begin()
{
    return tabliczka;

}
template<class T>
T* stosik<T>::end()
{
    return tabliczka + it;

}

template<class T>
bool stosik<T>::empty()
{
    return (it > 0) ? false : true;
}
template<class T>
int stosik<T>::size()
{
    return it;

}

template<class T>
T stosik<T>::pop_front()
{
    if (it != 0)
    {
        pamietnik = tabliczka[0];
        it = it - 1;
        dealokacja();
        return tabliczka[0];

    }


}
template<class T>
void stosik<T>::push_back(T a)
{
    tabliczka[it] = a;
    it++;

}


template<class T>
void stosik<T>::dealokacja()
{
    for (int i = 1; i <= it; i++)
    {
        tabliczka[i - 1] = tabliczka[i];


    }
}


int main()
{
    srand(time(NULL));
    stosik<int> st;
    stosik<int>::iterator st1 = st.begin();

    for (int i = 0; i < 15; i++)
    {
        st.push_back(rand()%15);

    }
    st.wypisz();
    cout << endl;
    st.sortuj();
    st.wypisz();
    cout << endl;
    cout<<st.max();
    cout << endl;
    cout<<st.min();


    cout << endl;

    return 0;
}
