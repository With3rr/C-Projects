
#include <iostream>
#include <time.h>
#include<conio.h>
#include <string>
#include<windows.h>
using namespace std;
bool gameOver;
const int width = 20;
const int height = 20;
int xpoz, ypoz, xfruit, yfruit,score;
int* tailx = new int[100], * taily = new int[100], ntail;
int prevx, prevy, sprevx, sprevy;
enum eDirection
{
	STOP=0,
	LEFT,
	RIGHT,
	UP,
	DOWN
	
};
eDirection direction;
void Setup()
{
	gameOver = false;
	direction = STOP;
	xpoz = width / 2;
	ypoz = height / 2;
	xfruit = rand() % (width-1);
	yfruit = rand() % (height-1);
}
void Draw()
{
	system("cls");
	for (int i = 0; i < width+2; i++)
	{
		cout << "#";
		
	}
	cout << endl;

	for (int i = 0; i < height ; i++)
	{
		
		for (int j = 0; j <width; j++)
		{
			if (j == 0)
			{
				cout << "#";
			}

			
			if (i == ypoz && j == xpoz)
			{

				cout << "O";
			
			}
			else if (i == yfruit && j == xfruit)
			{
				cout << "F";
				
			}
			else
			{
				for (int s = 0; s < ntail; s++)
				{
					if (tailx[s] == j && taily[s] == i)
					{
						cout << "o";
					}
					else
					{
						cout << " ";
					}

				}

			}
			
			if (j == width -1)
			{
				cout << "#";

			}
			
			
		}
		
		cout << endl;
	}

	for (int i = 0; i < width+2; i++)
	{
		cout << "#";

	}

	cout << "Score: " << score;


}
void Input()
{

	if (_kbhit())
	{
		switch (_getch())
		{
		case 'a':
			direction = LEFT;
			break;
		case 'd':
			direction = RIGHT;
			break;
		case 'w':
			direction = UP;
			break;
		case 's':
			direction = DOWN;
			break;
		case 'o':
			gameOver = true;
			break;
			
		}	

	}


}
void Logic()
{
	
	
	switch (direction)
	{
	case LEFT:
		xpoz--;
		break;
	case RIGHT:
		xpoz++;
		break;
	case UP:
		ypoz--;
		break;
	case DOWN:
		ypoz++;
		break;


	}
	if (xpoz > width-1 || xpoz < 0 || ypoz>height-1 || ypoz<0)
	{
		gameOver = true;

	}

	if (xpoz == xfruit && ypoz == yfruit)
	{
		score += 100;
		xfruit = rand() % (width-1);
		yfruit = rand() % (height-1);
	}
	



}
int main()
{
	

	
	srand(time(NULL));
	Setup();
	
	while (!gameOver)
	{

		Sleep(50);
		Draw();
		Input();
		Logic();

		

	}
	
	return 0;
}

